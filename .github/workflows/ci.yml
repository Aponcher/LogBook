name: CI

permissions:
  contents: write

on:
  push:
    branches: [ main, dev ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: logbook
          POSTGRES_USER: user
          POSTGRES_PASSWORD: dummy
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      IMAGE_NAME: logbook-app
      ECR_REPO: logbook-repository

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and run tests
        run: mvn clean verify

      # Extract Maven version from pom.xml
      - name: Extract version from POM
        id: get_version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Tagging version: $VERSION"

      # Create Git tag from Maven version (on main branch only)
      - name: Tag release in Git
        if: github.ref == 'refs/heads/main'
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git fetch --tags
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "Tag v$VERSION already exists"
          else
            git tag v$VERSION
            git push origin v$VERSION
          fi

      # --- Docker Hub ---

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:v${{ env.VERSION }}

      - name: Push to Docker Hub
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:v${{ env.VERSION }}

      # --- Amazon ECR ---

      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Log in to Amazon ECR
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag and push to ECR
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:v${{ env.VERSION }}
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPO }}:v${{ env.VERSION }}

      # Post-release version bump
      - name: Bump version post-release
        if: github.ref == 'refs/heads/main'
        run: |
          CURRENT=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          NEXT=$(echo $CURRENT | awk -F. '{$NF += 1; print $1 "." $2 "." $3 "-SNAPSHOT"}')
          mvn versions:set -DnewVersion=$NEXT -DgenerateBackupPoms=false
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -am "Bump version to $NEXT"
          git push origin main

      ### ---- Optional Slack Notification Placeholder ----
      # - name: Notify Slack
      #   if: failure() || success()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "Deployment status: ${{ job.status }} for ${{ github.ref }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}