name: CI

on:
  push:
    branches: [ main, dev ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: logbook
          POSTGRES_USER: user
          POSTGRES_PASSWORD: dummy
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      IS_MAIN_OR_TAG: ${{ github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/')) }}
      IMAGE_NAME: logbook-app
      DOCKER_TAG: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build and run tests
        run: mvn clean verify

      ### ---- Docker Hub ----

      - name: Log in to Docker Hub
        if: env.IS_MAIN_OR_TAG == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and tag Docker image
        if: env.IS_MAIN_OR_TAG == 'true'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.DOCKER_TAG }}

      - name: Push to Docker Hub
        if: env.IS_MAIN_OR_TAG == 'true'
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.DOCKER_TAG }}

      ### ---- Amazon ECR ----

      - name: Configure AWS credentials
        if: env.IS_MAIN_OR_TAG == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Log in to Amazon ECR
        if: env.IS_MAIN_OR_TAG == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and tag for Amazon ECR
        if: env.IS_MAIN_OR_TAG == 'true'
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:latest .
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ steps.login-ecr.outputs.registry }}/${{ env.IMAGE_NAME }}:${{ env.DOCKER_TAG }}

      - name: Push to Amazon ECR
        if: env.IS_MAIN_OR_TAG == 'true'
        run: |
          docker push ${{ steps.login-ecr.outputs.registry }}/logbook-repository:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/logbook-repository:${{ env.DOCKER_TAG }}

      ### ---- Optional Slack Notification Placeholder ----
      # - name: Notify Slack
      #   if: failure() || success()
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload: |
      #       {
      #         "text": "Deployment status: ${{ job.status }} for ${{ github.ref }}"
      #       }
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
